000:  ﻿#include <iostream>
001:  #include <fstream>
002:  #include <filesystem>
003:  #include <string>
004:  
005:  #include "strconv2.hpp"
006:  
007:  /// @brief ユーザーから入力ファイルのパスを受け付ける
008:  /// @note 正しい入力がされるまでブロッキングする
009:  /// @return 入力ファイルのパス
010:  static std::filesystem::path requestUserSourceFilePath()
011:  {
012:  	std::filesystem::path sourceFilePath;
013:  
014:  	for (;;)
015:  	{
016:  		std::cout << "Source file path > ";
017:  		std::cin >> sourceFilePath;
018:  		std::cin.ignore(); // ignore \n
019:  
020:  		if (std::filesystem::exists(sourceFilePath))
021:  		{
022:  			if (std::filesystem::is_regular_file(sourceFilePath))
023:  				break;
024:  			else
025:  				std::cerr << "this is not file!" << std::endl;
026:  		}
027:  		else
028:  		{
029:  			std::cerr << "file not found!" << std::endl;
030:  			continue;
031:  		}
032:  	}
033:  
034:  	return sourceFilePath;
035:  }
036:  
037:  
038:  enum class OutputStream
039:  {
040:  	Console,
041:  	File,
042:  };
043:  
044:  /// @brief ユーザーから出力データの出力先を受け付ける
045:  /// @note 正しい入力がされるまでブロッキングする
046:  /// @return 出力先
047:  static OutputStream requestUserOutputStream()
048:  {
049:  	std::cout << "Output stream [c]console / [f]textfile (c) > ";
050:  
051:  	for (;;)
052:  	{
053:  		switch (std::cin.get())
054:  		{
055:  		case 'c':
056:  		case '\n':
057:  			return OutputStream::Console;
058:  		case 'f':
059:  			return OutputStream::File;
060:  		default:
061:  			continue;
062:  		}
063:  	}
064:  }
065:  
066:  
067:  /// @brief ユーザーから出力ファイル名を受け付ける
068:  /// @note 拡張子のない文字列を受け取った場合、txtファイルとなる
069:  /// @note 入力がされるまでブロッキングする
070:  /// @return 出力ファイル名
071:  static std::filesystem::path requestUserOutputFileName()
072:  {
073:  	std::cout << "file name (output.txt) > ";
074:  	std::cin.ignore(); // ignore \n
075:  
076:  	std::string distFileName;
077:  	if (std::cin.peek() == '\n')
078:  	{
079:  		// デフォルト
080:  		distFileName = "output.txt";
081:  	}
082:  	else
083:  	{
084:  		std::cin >> distFileName;
085:  	}
086:  
087:  	// 拡張子が指定されていない場合、txtファイルとする
088:  	if (not std::filesystem::path{ distFileName }.has_extension())
089:  	{
090:  		distFileName += ".txt";
091:  	}
092:  
093:  	return distFileName;
094:  }
095:  
096:  
097:  /// @brief 入力ストリームの各行先頭に行番号を加え、出力ストリームへ書き込む
098:  /// @param source 入力ストリーム
099:  /// @param dist 出力ストリーム
100:  static void outputWithLineNumber(std::istream& source, std::ostream& dist)
101:  {
102:  	std::string input;
103:  	for (int i = 0; std::getline(source, input); ++i)
104:  	{
105:  		dist << std::setw(3) << std::setfill('0') << i << ":  " << input << std::endl;
106:  	}
107:  }
108:  
109:  int main(int argc, char* argv[])
110:  {
111:  	std::filesystem::path sourceFilePath;
112:  	if (argc == 2)
113:  	{
114:  		// ファイルがドラッグアンドドロップされ起動時
115:  		sourceFilePath = argv[1];
116:  	}
117:  	else
118:  	{
119:  		// 通常起動
120:  		sourceFilePath = requestUserSourceFilePath();
121:  	}
122:  
123:  	switch (requestUserOutputStream())
124:  	{
125:  
126:  	case OutputStream::Console:
127:  	{
128:  		std::ifstream sourceFile(sourceFilePath);
129:  
130:  		outputWithLineNumber(sourceFile, std::cout);
131:  
132:  		break;
133:  	}
134:  
135:  	case OutputStream::File:
136:  	{
137:  		const auto distFileName = requestUserOutputFileName();
138:  		const auto distFilePath = sourceFilePath.parent_path() / distFileName;
139:  
140:  		std::cout << "output for " << distFilePath.string() << std::endl;
141:  
142:  		std::ifstream sourceFile(sourceFilePath);
143:  		std::ofstream distFile(distFilePath);
144:  
145:  		outputWithLineNumber(sourceFile, distFile);
146:  
147:  		break;
148:  	}
149:  
150:  	}
151:  
152:  }

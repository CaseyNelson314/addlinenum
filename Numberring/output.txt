00:  ﻿#include <iostream>
01:  #include <fstream>
02:  #include <filesystem>
03:  #include <string>
04:  
05:  static std::filesystem::path requestUserFilePath()
06:  {
07:  	std::filesystem::path sourceFilePath;
08:  	// 通常起動時
09:  	for (;;)
10:  	{
11:  		std::cout << "Source file path > ";
12:  		std::cin >> sourceFilePath;
13:  		std::cin.ignore(); // ignore \n
14:  		if (not std::filesystem::exists(sourceFilePath))
15:  		{
16:  			std::cerr << "file not found!" << std::endl;
17:  			continue;
18:  		}
19:  		else
20:  		{
21:  			break;
22:  		}
23:  	}
24:  	return sourceFilePath;
25:  }
26:  
27:  enum class OutputStream
28:  {
29:  	Console,
30:  	File,
31:  };
32:  
33:  static OutputStream requestUserOutputStream()
34:  {
35:  	std::cout << "Output stream [c]console / [f]textfile (c) > ";
36:  
37:  	for (;;)
38:  	{
39:  		switch (std::cin.get())
40:  		{
41:  		case 'c':
42:  		case '\n':
43:  			return OutputStream::Console;
44:  		case 'f':
45:  			return OutputStream::File;
46:  		default:
47:  			continue;
48:  		}
49:  	}
50:  }
51:  
52:  static std::filesystem::path requestUserOutputFileName()
53:  {
54:  	std::cout << "file name (output.txt) > ";
55:  	std::cin.ignore(); // ignore \n
56:  
57:  	std::string distFileName;
58:  	if (std::cin.peek() == '\n')
59:  	{
60:  		distFileName = "output.txt";
61:  	}
62:  	else
63:  	{
64:  		std::cin >> distFileName;
65:  	}
66:  	if (not std::filesystem::path{ distFileName }.has_extension())
67:  	{
68:  		distFileName += ".txt";
69:  	}
70:  
71:  	return distFileName;
72:  }
73:  static void output(std::istream& source, std::ostream& dist)
74:  {
75:  	std::string input;
76:  	for (int i = 0; std::getline(source, input); ++i)
77:  	{
78:  		dist << std::setw(2) << std::setfill('0') << i << ":  " << input << std::endl;
79:  	}
80:  }
81:  
82:  int main(int argc, char* argv[])
83:  {
84:  
85:  	// input source file path from user.
86:  	std::filesystem::path sourceFilePath;
87:  	if (argc == 2)
88:  	{
89:  		// ファイルがドラッグアンドドロップされ起動時
90:  		sourceFilePath = argv[1];
91:  	}
92:  	else
93:  	{
94:  		// 通常起動
95:  		sourceFilePath = requestUserFilePath();
96:  		//sourceFilePath = R"(C:\Users\casey\Desktop\dev\Numberring\Numberring\Numberring.cpp)"; //requestUserFilePath();
97:  	}
98:  
99:  	switch (requestUserOutputStream())
100:  	{
101:  
102:  	case OutputStream::Console:
103:  	{
104:  		std::ifstream sourceFile(sourceFilePath);
105:  		output(sourceFile, std::cout);
106:  		break;
107:  	}
108:  
109:  	case OutputStream::File:
110:  	{
111:  		const auto distFileName = requestUserOutputFileName();
112:  		const auto distFilePath = sourceFilePath.parent_path() / distFileName;
113:  
114:  		std::cout << "output for " << distFilePath.string() << std::endl;
115:  
116:  		std::ifstream sourceFile(sourceFilePath);
117:  		std::ofstream distFile(distFilePath);
118:  
119:  		output(sourceFile, distFile);
120:  
121:  		break;
122:  	}
123:  
124:  	}
125:  
126:  	system("pause");
127:  }

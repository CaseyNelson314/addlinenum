00:  ﻿#include <iostream>
01:  #include <fstream>
02:  #include <filesystem>
03:  #include <string>
04:  
05:  static std::filesystem::path requestUserFilePath()
06:  {
07:  	std::filesystem::path sourceFilePath;
08:  	// 通常起動時
09:  	for (;;)
10:  	{
11:  		std::cout << "Source file path > ";
12:  		std::cin >> sourceFilePath;
13:  		if (not std::filesystem::exists(sourceFilePath))
14:  		{
15:  			std::cerr << "file not found!" << std::endl;
16:  			continue;
17:  		}
18:  		else
19:  		{
20:  			break;
21:  		}
22:  	}
23:  	return sourceFilePath;
24:  }
25:  
26:  enum class OutputStream
27:  {
28:  	Console,
29:  	File,
30:  };
31:  
32:  static OutputStream requestUserOutputStream()
33:  {
34:  	std::cin.ignore();
35:  	std::cout << "Output stream [c]console / [f]textfile (c) > ";
36:  
37:  	for (;;)
38:  	{
39:  		switch (std::cin.get())
40:  		{
41:  		case 'c':
42:  		case '\n':
43:  			return OutputStream::Console;
44:  		case 'f':
45:  			return OutputStream::File;
46:  		default:
47:  			continue;
48:  		}
49:  	}
50:  }
51:  
52:  static std::filesystem::path requestUserOutputFileName()
53:  {
54:  	std::cout << "file name (output.txt) > ";
55:  	std::cin.ignore();
56:  
57:  	std::string distFileName;
58:  	if (std::cin.peek() == '\n')
59:  	{
60:  		distFileName = "output.txt";
61:  	}
62:  	else
63:  	{
64:  		std::cin >> distFileName;
65:  	}
66:  	if (not std::filesystem::path{ distFileName }.has_extension())
67:  	{
68:  		distFileName += ".txt";
69:  	}
70:  
71:  	return distFileName;
72:  }
73:  static void output(std::istream& source, std::ostream& dist)
74:  {
75:  	std::string input;
76:  	for (int i = 0; std::getline(source, input); ++i)
77:  	{
78:  		dist << std::setw(2) << std::setfill('0') << i << ":  " << input << std::endl;
79:  	}
80:  }
81:  
82:  int main(int argc, char* argv[])
83:  {
84:  
85:  	// input source file path from user.
86:  	std::filesystem::path sourceFilePath;
87:  	if (argc == 2)
88:  	{
89:  		// ファイルがドラッグアンドドロップされ起動時
90:  		sourceFilePath = argv[1];
91:  	}
92:  	else
93:  	{
94:  		// 通常起動
95:  		sourceFilePath = R"(C:\Users\casey\Desktop\dev\Numberring\Numberring\Numberring.cpp)"; //requestUserFilePath();
96:  	}
97:  
98:  	switch (requestUserOutputStream())
99:  	{
100:  
101:  	case OutputStream::Console:
102:  	{
103:  		std::ifstream sourceFile(sourceFilePath);
104:  		output(sourceFile, std::cout);
105:  		break;
106:  	}
107:  
108:  	case OutputStream::File:
109:  	{
110:  		const auto distFileName = requestUserOutputFileName();
111:  		const auto distFilePath = sourceFilePath.parent_path() / distFileName;
112:  
113:  		std::cout << "output for " << distFilePath.string() << std::endl;
114:  
115:  		std::ifstream sourceFile(sourceFilePath);
116:  		std::ofstream distFile(distFilePath);
117:  
118:  		output(sourceFile, distFile);
119:  
120:  		break;
121:  	}
122:  
123:  	}
124:  
125:  	system("pause");
126:  }
